# #정수 n을 기준으로 n과 가까운 수부터
# # 정렬하려고 합니다.
# # 이때 n으로부터의 거리가 같다면
# # 더 큰 수를 앞에 오도록 배치합니다.
# # 정수가 담긴 배열 numlist와 정수 n이 주어질 때
# # numlist의 원소를 n으로부터
# # 가까운 순서대로 정렬한 배열을 return하도록
# # solution 함수를 완성해주세요.
#
#
# def solution(numlist, n):
#     answer = []
#     for i in range(len(numlist)):
#         d= n-numlist[i]
#         if d < 0:
#             d = -d
#         numlist[i]=[d,numlist[i]]
#     numlist.sort()
#
#     for i in range(len(numlist)):
#         if numlist[i - 1][0] == numlist[i][0] and numlist[i-1][1] < numlist[i][1]:
#             answer.insert(i-1,numlist[i][1])
#         else:
#             answer.append(numlist[i][1])
#     return answer
# print(solution([1, 2, 3, 4, 5, 6],4))

#
# def solution(num):
#     if num % 2 == 0:
#         return 'Even'
#     else:
#         return 'Odd'


#120863



#한 개 이상의 항의 합으로 이루어진 식을
# 다항식이라고 합니다.
# 다항식을 계산할 때는 동류항끼리 계산해 정리합니다.
# 덧셈으로 이루어진 다항식 polynomial이 매개변수로
# 주어질 때, 동류항끼리 더한 결괏값을 문자열로
# return 하도록 solution 함수를 완성해보세요.
# 같은 식이라면 가장 짧은 수식을 return 합니다.0 < polynomial에 있는 수 < 100
#
# polynomial에 변수는 'x'만 존재합니다.
#
# polynomial은 0부터 9까지의 정수, 공백, ‘x’, ‘+'로 이루어져 있습니다.
#
# 항과 연산기호 사이에는 항상 공백이 존재합니다.
#
# 공백은 연속되지 않으며 시작이나 끝에는 공백이 없습니다.
#
# 하나의 항에서 변수가 숫자 앞에 오는 경우는 없습니다.
#
# " + 3xx + + x7 + "와 같은 잘못된 입력은 주어지지 않습니다.
#
# "012x + 001"처럼 0을 제외하고는 0으로 시작하는 수는 없습니다.
#
# 문자와 숫자 사이의 곱하기는 생략합니다.
#
# polynomial에는 일차 항과 상수항만 존재합니다.
#
# 계수 1은 생략합니다.
#
# 결괏값에 상수항은 마지막에 둡니다.
#
# 0 < polynomial의 길이 < 50
def solution(polynomial):
    #일단 계산할 값들을 따로따로 분리시킨다
    #x가 있는 것은 x가 있는것끼리 계산한다
    answer = ''

    in_x = []
    not_x = []
    polynomial=polynomial.split()
    for i in polynomial:
        if 'x' in i:
            in_x.append(i)
        elif i.isdigit():
            not_x.append(i)
    return answer
#pop
p='3x + 7 + x'
print(solution(p))
