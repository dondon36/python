# def solution(arr1, arr2):
#     answer = []
#
#     for x in range(len(arr1)):
#         sublist = []
#         for y in range(len(arr1[x])):
#             sublist.append(arr1[x][y] + arr2[x][y])
#         answer.append(sublist)
#
#     return answer
#
#
#
# arr1=[[1,2],
#       [2,3]]
# arr2=[[3,4],
#       [5,6]]
# print(solution(arr1,arr2))
# def solution(letter):
#     letter = letter.split()
#     morse = {
#         '.-': 'a', '-...': 'b', '-.-.': 'c', '-..': 'd', '.': 'e', '..-.': 'f',
#         '--.': 'g', '....': 'h', '..': 'i', '.---': 'j', '-.-': 'k', '.-..': 'l',
#         '--': 'm', '-.': 'n', '---': 'o', '.--.': 'p', '--.-': 'q', '.-.': 'r',
#         '...': 's', '-': 't', '..-': 'u', '...-': 'v', '.--': 'w', '-..-': 'x',
#         '-.--': 'y', '--..': 'z'
#     }
#     print(letter)
#     answer = ''
#     for string in letter:
#         answer += morse[string]
#
#     return answer
# l=".... . .-.. .-.. ---"
# print(solution(l))
# def solution(chicken):
#     answer = 0
#     coupon=chicken
#
#     while coupon >= 10:
#         eaten = coupon // 10
#         answer += eaten
#         coupon=coupon % 10 + eaten
#     return answer
#
# c1=100
# c2=1081
# print(solution(c1))
# print(solution(c2))
def solution(sides):
    side1=min(sides)
    side2=max(sides)
    s1=list(range(side2-side1+1,side2+1))
    print(s1)
    s2= list(range(side2+1,sum(sides)))
    return len(s1)+len(s2)
print(solution([11,7]))
# 정수 n을 기준으로 n과 가까운 수부터 정렬하려고 합니다. 
# 이때 n으로부터의 거리가 같다면 더 큰 수를 앞에 오도록
# 배치합니다. 정수가 담긴 배열 numlist와 정수 n이 주어질 때
# numlist의 원소를 n으로부터 가까운 순서대로 
# 정렬한 배열을 return하도록 
# solution 함수를 완성해주세요.
